const express = require('express');
const router = express.Router();
const client = require('../db');
const querystring = require('querystring');
const bcrypt = require('bcryptjs');
const collectionName = "Users";
//(temporary) Admin API for testing
router.delete('/', async function (req, res, next) {
    client.emptyCollection(collectionName);
    res.status(200).send("Collection " + collectionName + " is empty.");
});

//register a new user
router.post('/signup', async function (req, res, next) {
    const {uid, photoURL, email, password, firstName, lastName, contact, school, paymentMethods, phone} = req.body;
    const collection = client.dbCollection(collectionName);
    collection.findOne({
        "email": email
    }).then(function (user) {
        if (user) {//email already exists
            res.status(409).send("Email Already Exists.");
        } else {
            bcrypt.genSalt(10, function(err, salt) {
                bcrypt.hash(password, salt, function(err, hash) {
                    let userDocument = {
                        "_id": uid, //will be string - uid generated by firebase
                        photoURL,
                        "email": email,
                        "password": hash,
                        "firstName": firstName,
                        "lastName": lastName,
                        "contact": contact,
                        "school": school,
                        "paymentMethods": paymentMethods ? paymentMethods : [],
                        "phone": phone,
                        "addresses": {},
                        // "rides": {},
                        // "vehicles": {},
                        "ratingDriver": -1,
                        "ratingPassenger": -1
                    };
                    collection.insertOne(userDocument, function (err, record) {
                        if (err) {//insert a record with an existing _id value
                            console.log(err);
                            res.sendStatus(400);
                        } else {
                            console.log("Record added as " + JSON.stringify(record.ops[0]));
                            res.status(201).send(JSON.stringify(record.ops[0]));//Created
                        }
                    });
                });
            });

        }
    });
});

//Get user's info
router.get('/:userID', async function (req, res, next) {
    const userID = req.params.userID;
    const collection = client.dbCollection(collectionName);
    collection.findOne({
        "_id": userID
    }).then(function (user) {
        if (user) {
            res.status(200).json(user);
        } else {
            res.status(404).send("User " + userID + " is not found");
        }
    });
})

//Update user's info
router.put('/:userID', async function (req, res, next) {
    const userID = req.params.userID;
    const body = {firstName, lastName, contact, school, phone} = req.body;
    //remove all undefined field
    Object.keys(body).forEach(key => {
        if (body[key] === undefined) {
            delete body[key];
        }
    });

    const collection = client.dbCollection(collectionName);
    collection.updateOne({
        "_id": userID
    }, {
        $set: body
    }).then(function (rep) {
        if (rep.modifiedCount == 1) {
            res.status(200).json(rep);
        } else {
            res.status(400).send("Bad Request: Cannot Update.");
        }
    });
})

module.exports = router;

